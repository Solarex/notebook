Android流量监控模块学习
====================
+ ``SparseArrays`` map integers to Objects.  Unlike a normal array of Objects,there can be gaps in the indices.  It is intended to be more efficient than using a ``HashMap`` to map Integers to Objects.
+ ``Parcel`` Container for a message (data and object references) that can be sent through an ``IBinder``. A Parcel can contain both flattened data that will be unflattened on the other side of the IPC (using the various methods here for writing specific types, or the general Parcelable interface), and references to live IBinder objects that will result in the other side receiving a proxy IBinder connected with the original IBinder in the Parcel.Parcel is not a general-purpose serialization mechanism. This class (and the corresponding Parcelable API for placing arbitrary objects into a Parcel) is designed as a high-performance IPC transport. As such, it is not appropriate to place any Parcel data in to persistent storage: changes in the underlying implementation of any of the data in the Parcel can render older data unreadable.Parcel被设计用来做高性能IPC，不适合做序列化。
+ ``ConnectivityManager`` Class that answers queries about the state of network connectivity.查询网络连接状态 It also notifies applications when network connectivity changes. Get an instance of this class by calling ``Context.getSystemService(Context.CONNECTIVITY_SERVICE)``.The primary responsibilities of this class are to:
	+ Monitor network connections (Wi-Fi, GPRS, UMTS, etc.)
	+ Send broadcast intents when network connectivity changes
	+ Attempt to "fail over" to another network when connectivity to a network is lost
	+ Provide an API that allows applications to query the coarse-grained or fine-grained state of the available networks
+ ``NetworkPolicyManager`` Manager for creating and modifying network policy rules.
+ ``NetworkStatsService`` Collect and persist detailed network statistics, and provide this data to other system services. ``NetworkStatsSettings``Settings that can be changed externally.
+ ``HandlerThread`` Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that ``start()`` must still be called.
+ ``RemoteCallbackList`` Takes care of the grunt work of maintaining a list of remote interfaces, typically for the use of performing callbacks from a Service to its clients. ``RemoteCallbackList``主要用来处理service对client的回调处理。In particular, this:
	+ Keeps track of a set of registered ``IInterface`` callbacks, taking care to identify them through their underlying unique ``IBinder`` (by calling ``IInterface.asBinder()``.
	+ Attaches a ``IBinder.DeathRecipient`` to each registered interface, so that it can be cleaned out of the list if its process goes away.
	+ Performs locking of the underlying list of interfaces to deal with multithreaded incoming calls, and a thread-safe way to iterate over a snapshot of the list without holding its lock.
To use this class, simply create a single instance along with your service, and call its ``register(E)`` and ``unregister(E)`` methods as client register and unregister with your service. To call back on to the registered clients, use ``beginBroadcast()``, ``getBroadcastItem(int)``, and ``finishBroadcast()``.If a registered callback's process goes away, this class will take care of automatically removing it from the list. If you want to do additional work in this situation, you can create a subclass that implements the ``onCallbackDied(E)`` method.要使用这个类，创建一个和你的服务相连的实例，client调用``register(E)``和``unregister(E)``来register和unregister service。
+ ``NetworkStats`` Creates ``NetworkStats`` instances by parsing various ``/proc/`` files as needed.
+ ``Context.enforceCallingOrSelfPermission(String permission, String message)`` If neither you nor the calling process of an IPC you are handling has been granted a particular permission, throw a ``SecurityException``.被授予特殊权限的时候抛出``SecurityException``异常。
+ ``NativeDaemonConnector`` Generic connector class for interfacing with a native daemon which uses the ``libsysutils`` FrameworkListener protocol.通用的用来和使用了``libsysutils`` FrameworkListener协议的本地守护进程进行交互的connector class。